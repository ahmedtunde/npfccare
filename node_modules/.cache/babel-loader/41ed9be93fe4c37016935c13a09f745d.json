{"ast":null,"code":"import axios from \"axios\";\nimport { getAccessToken, getLoanAccessToken, clearAllTokens } from \"./localStorageService\";\nconst {\n  REACT_APP_API_BASE_URL,\n  REACT_APP_LOAN_API_BASE_URL\n} = process.env;\n\nconst createApiCients = (baseURL, getToken, clearToken) => {\n  const newApiClient = axios.create({\n    baseURL,\n    timeout: 40000\n  });\n  newApiClient.interceptors.request.use(config => {\n    const token = getToken();\n    const headerToken = config.headers.Authorization; //create new config object; setting header\n\n    const newConfig = { ...config,\n      headers: { ...config.headers,\n        Authorization: headerToken || token || \"\"\n      },\n      validateStatus: status => {\n        // console.log(status);\n        return true;\n      }\n    }; //return new config object\n\n    return newConfig;\n  }, error => {\n    return Promise.reject(error);\n  });\n  newApiClient.interceptors.response.use(response => response, error => {\n    var _error$response, _error$response2, _error$response3;\n\n    // if our server returns a 403 forbidden response\n\n    /**\n     * error.response = {\n     *  \"data\":{},\n     * \"status\": 403,\n     * \"statusText\": \"Forbidden\",\n     * \"headers\": {},\n     * \"config\": {\n     *  \"url\": \"/api/users/cilozulu\",\n     *  \"method\": \"get\",\n     *  \"headers\": {\n     *      \"Accept\": \"\",\n     *      \"x-access-token\": \"\"\n     *   },\n     * \"baseURL\": \"\"\n     * }\n     * and someother parameters\n     */\n    // console.log(\"Interceptor error\", Object.entries(error));\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 400) clearToken();\n\n    if ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) {\n      var _error$response4;\n\n      return Promise.reject((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data);\n    }\n\n    return Promise.reject(error);\n  });\n  return newApiClient;\n};\n\nconst apiClient = createApiCients(REACT_APP_API_BASE_URL, () => `Bearer ${getAccessToken()}`, clearAllTokens);\nexport const loanApiClient = createApiCients(REACT_APP_LOAN_API_BASE_URL, getLoanAccessToken, clearAllTokens);\nexport const adminLoanApiClient = createApiCients(REACT_APP_LOAN_API_BASE_URL, getAccessToken, clearAllTokens);\nexport default apiClient;","map":{"version":3,"sources":["/Users/xerde2/Downloads/npf-admin-web/src/utils/apiClient.js"],"names":["axios","getAccessToken","getLoanAccessToken","clearAllTokens","REACT_APP_API_BASE_URL","REACT_APP_LOAN_API_BASE_URL","process","env","createApiCients","baseURL","getToken","clearToken","newApiClient","create","timeout","interceptors","request","use","config","token","headerToken","headers","Authorization","newConfig","validateStatus","status","error","Promise","reject","response","data","apiClient","loanApiClient","adminLoanApiClient"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,cADF,EAEEC,kBAFF,EAGEC,cAHF,QAIO,uBAJP;AAMA,MAAM;AAAEC,EAAAA,sBAAF;AAA0BC,EAAAA;AAA1B,IAA0DC,OAAO,CAACC,GAAxE;;AAEA,MAAMC,eAAe,GAAG,CAACC,OAAD,EAAUC,QAAV,EAAoBC,UAApB,KAAmC;AACzD,QAAMC,YAAY,GAAGZ,KAAK,CAACa,MAAN,CAAa;AAChCJ,IAAAA,OADgC;AAEhCK,IAAAA,OAAO,EAAE;AAFuB,GAAb,CAArB;AAKAF,EAAAA,YAAY,CAACG,YAAb,CAA0BC,OAA1B,CAAkCC,GAAlC,CACGC,MAAD,IAAY;AACV,UAAMC,KAAK,GAAGT,QAAQ,EAAtB;AACA,UAAMU,WAAW,GAAGF,MAAM,CAACG,OAAP,CAAeC,aAAnC,CAFU,CAGV;;AACA,UAAMC,SAAS,GAAG,EAChB,GAAGL,MADa;AAEhBG,MAAAA,OAAO,EAAE,EACP,GAAGH,MAAM,CAACG,OADH;AAEPC,QAAAA,aAAa,EAAEF,WAAW,IAAID,KAAf,IAAwB;AAFhC,OAFO;AAMhBK,MAAAA,cAAc,EAAGC,MAAD,IAAY;AAC1B;AACA,eAAO,IAAP;AACD;AATe,KAAlB,CAJU,CAeV;;AACA,WAAOF,SAAP;AACD,GAlBH,EAmBGG,KAAD,IAAW;AACT,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,GArBH;AAwBAd,EAAAA,YAAY,CAACG,YAAb,CAA0Bc,QAA1B,CAAmCZ,GAAnC,CACGY,QAAD,IAAcA,QADhB,EAEGH,KAAD,IAAW;AAAA;;AACT;;AACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACM;AACA,QAAI,oBAAAA,KAAK,CAACG,QAAN,oEAAgBJ,MAAhB,MAA2B,GAA3B,IAAkC,qBAAAC,KAAK,CAACG,QAAN,sEAAgBJ,MAAhB,MAA2B,GAAjE,EACEd,UAAU;;AACZ,4BAAIe,KAAK,CAACG,QAAV,qDAAI,iBAAgBC,IAApB,EAA0B;AAAA;;AACxB,aAAOH,OAAO,CAACC,MAAR,qBAAeF,KAAK,CAACG,QAArB,qDAAe,iBAAgBC,IAA/B,CAAP;AACD;;AACD,WAAOH,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,GA5BH;AA8BA,SAAOd,YAAP;AACD,CA7DD;;AA+DA,MAAMmB,SAAS,GAAGvB,eAAe,CAC/BJ,sBAD+B,EAE/B,MAAO,UAASH,cAAc,EAAG,EAFF,EAG/BE,cAH+B,CAAjC;AAMA,OAAO,MAAM6B,aAAa,GAAGxB,eAAe,CAC1CH,2BAD0C,EAE1CH,kBAF0C,EAG1CC,cAH0C,CAArC;AAMP,OAAO,MAAM8B,kBAAkB,GAAGzB,eAAe,CAC/CH,2BAD+C,EAE/CJ,cAF+C,EAG/CE,cAH+C,CAA1C;AAMP,eAAe4B,SAAf","sourcesContent":["import axios from \"axios\";\nimport {\n  getAccessToken,\n  getLoanAccessToken,\n  clearAllTokens,\n} from \"./localStorageService\";\n\nconst { REACT_APP_API_BASE_URL, REACT_APP_LOAN_API_BASE_URL } = process.env;\n\nconst createApiCients = (baseURL, getToken, clearToken) => {\n  const newApiClient = axios.create({\n    baseURL,\n    timeout: 40000,\n  });\n\n  newApiClient.interceptors.request.use(\n    (config) => {\n      const token = getToken();\n      const headerToken = config.headers.Authorization;\n      //create new config object; setting header\n      const newConfig = {\n        ...config,\n        headers: {\n          ...config.headers,\n          Authorization: headerToken || token || \"\",\n        },\n        validateStatus: (status) => {\n          // console.log(status);\n          return true;\n        },\n      };\n      //return new config object\n      return newConfig;\n    },\n    (error) => {\n      return Promise.reject(error);\n    }\n  );\n\n  newApiClient.interceptors.response.use(\n    (response) => response,\n    (error) => {\n      // if our server returns a 403 forbidden response\n      /**\n       * error.response = {\n       *  \"data\":{},\n       * \"status\": 403,\n       * \"statusText\": \"Forbidden\",\n       * \"headers\": {},\n       * \"config\": {\n       *  \"url\": \"/api/users/cilozulu\",\n       *  \"method\": \"get\",\n       *  \"headers\": {\n       *      \"Accept\": \"\",\n       *      \"x-access-token\": \"\"\n       *   },\n       * \"baseURL\": \"\"\n       * }\n       * and someother parameters\n       */\n      // console.log(\"Interceptor error\", Object.entries(error));\n      if (error.response?.status === 401 || error.response?.status === 400)\n        clearToken();\n      if (error.response?.data) {\n        return Promise.reject(error.response?.data);\n      }\n      return Promise.reject(error);\n    }\n  );\n  return newApiClient;\n};\n\nconst apiClient = createApiCients(\n  REACT_APP_API_BASE_URL,\n  () => `Bearer ${getAccessToken()}`,\n  clearAllTokens\n);\n\nexport const loanApiClient = createApiCients(\n  REACT_APP_LOAN_API_BASE_URL,\n  getLoanAccessToken,\n  clearAllTokens\n);\n\nexport const adminLoanApiClient = createApiCients(\n  REACT_APP_LOAN_API_BASE_URL,\n  getAccessToken,\n  clearAllTokens\n);\n\nexport default apiClient;\n"]},"metadata":{},"sourceType":"module"}