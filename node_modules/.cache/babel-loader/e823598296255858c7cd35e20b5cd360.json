{"ast":null,"code":"import apiClient from \"../utils/apiClient\";\nimport { setLoanToken, setRoles, setToken, setLoanRoles, setBranchId, setAdminEmail, setAdminName } from \"../utils/localStorageService\";\nimport notify from \"../utils/notification\";\nexport const signInAdmin = async (email, password) => {\n  try {\n    const response = await apiClient.post(\"/auth/admin_sign_in\", {\n      email,\n      password\n    });\n    const {\n      token,\n      roles,\n      loanRoles,\n      branch,\n      adminName\n    } = response.data;\n    console.log(response);\n\n    if (response.data.statusCode && response.data.statusCode === 401) {\n      notify(response.data.message, \"error\");\n      return;\n    }\n\n    setToken(token);\n    setRoles([...roles]);\n    setLoanToken(token);\n    setLoanRoles([...loanRoles]);\n    setBranchId(branch);\n    setAdminEmail(email);\n    setAdminName(adminName);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const resetAdminPassword = async (old_password, new_password) => {\n  try {\n    const response = await apiClient.post(\"/auth/change_admin_password\", {\n      old_password,\n      new_password\n    }); //const token = response.data.token;\n    //setToken(token);\n\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const initiatePasswordRest = async () => {\n  try {\n    const response = await apiClient.post(\"/auth/initiate_admin_password_reset\", {});\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const generateCustomerToken = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/auth/user_admin_auth\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};","map":{"version":3,"sources":["/Users/xerde2/Downloads/npf-admin-web/src/services/authService.js"],"names":["apiClient","setLoanToken","setRoles","setToken","setLoanRoles","setBranchId","setAdminEmail","setAdminName","notify","signInAdmin","email","password","response","post","token","roles","loanRoles","branch","adminName","data","console","log","statusCode","message","error","Promise","reject","resetAdminPassword","old_password","new_password","initiatePasswordRest","generateCustomerToken","customer_id"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,SACEC,YADF,EAEEC,QAFF,EAGEC,QAHF,EAIEC,YAJF,EAKEC,WALF,EAMEC,aANF,EAOEC,YAPF,QAQO,8BARP;AASA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA,OAAO,MAAMC,WAAW,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAA2B;AACpD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMZ,SAAS,CAACa,IAAV,CAAe,qBAAf,EAAsC;AAC3DH,MAAAA,KAD2D;AAE3DC,MAAAA;AAF2D,KAAtC,CAAvB;AAIA,UAAM;AAAEG,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA,SAAhB;AAA2BC,MAAAA,MAA3B;AAAmCC,MAAAA;AAAnC,QAAiDN,QAAQ,CAACO,IAAhE;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;;AAEA,QAAIA,QAAQ,CAACO,IAAT,CAAcG,UAAd,IAA4BV,QAAQ,CAACO,IAAT,CAAcG,UAAd,KAA6B,GAA7D,EAAkE;AAChEd,MAAAA,MAAM,CAACI,QAAQ,CAACO,IAAT,CAAcI,OAAf,EAAwB,OAAxB,CAAN;AACA;AACD;;AAEDpB,IAAAA,QAAQ,CAACW,KAAD,CAAR;AACAZ,IAAAA,QAAQ,CAAC,CAAC,GAAGa,KAAJ,CAAD,CAAR;AACAd,IAAAA,YAAY,CAACa,KAAD,CAAZ;AACAV,IAAAA,YAAY,CAAC,CAAC,GAAGY,SAAJ,CAAD,CAAZ;AACAX,IAAAA,WAAW,CAACY,MAAD,CAAX;AACAX,IAAAA,aAAa,CAACI,KAAD,CAAb;AACAH,IAAAA,YAAY,CAACW,SAAD,CAAZ;AAEA,WAAON,QAAQ,CAACO,IAAhB;AACD,GAvBD,CAuBE,OAAOK,KAAP,EAAc;AACd,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD;AACF,CA3BM;AA6BP,OAAO,MAAMG,kBAAkB,GAAG,OAAOC,YAAP,EAAqBC,YAArB,KAAsC;AACtE,MAAI;AACF,UAAMjB,QAAQ,GAAG,MAAMZ,SAAS,CAACa,IAAV,CAAe,6BAAf,EAA8C;AACnEe,MAAAA,YADmE;AAEnEC,MAAAA;AAFmE,KAA9C,CAAvB,CADE,CAKF;AACA;;AACA,WAAOjB,QAAQ,CAACO,IAAhB;AACD,GARD,CAQE,OAAOK,KAAP,EAAc;AACd,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD;AACF,CAZM;AAcP,OAAO,MAAMM,oBAAoB,GAAG,YAAY;AAC9C,MAAI;AACF,UAAMlB,QAAQ,GAAG,MAAMZ,SAAS,CAACa,IAAV,CACrB,qCADqB,EAErB,EAFqB,CAAvB;AAIA,WAAOD,QAAQ,CAACO,IAAhB;AACD,GAND,CAME,OAAOK,KAAP,EAAc;AACd,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD;AACF,CAVM;AAYP,OAAO,MAAMO,qBAAqB,GAAG,MAAOC,WAAP,IAAuB;AAC1D,MAAI;AACF,UAAMpB,QAAQ,GAAG,MAAMZ,SAAS,CAACa,IAAV,CAAe,uBAAf,EAAwC;AAC7DmB,MAAAA;AAD6D,KAAxC,CAAvB;AAGA,WAAOpB,QAAQ,CAACO,IAAhB;AACD,GALD,CAKE,OAAOK,KAAP,EAAc;AACd,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD;AACF,CATM","sourcesContent":["import apiClient from \"../utils/apiClient\";\nimport {\n  setLoanToken,\n  setRoles,\n  setToken,\n  setLoanRoles,\n  setBranchId,\n  setAdminEmail,\n  setAdminName,\n} from \"../utils/localStorageService\";\nimport notify from \"../utils/notification\";\n\nexport const signInAdmin = async (email, password) => {\n  try {\n    const response = await apiClient.post(\"/auth/admin_sign_in\", {\n      email,\n      password,\n    });\n    const { token, roles, loanRoles, branch, adminName } = response.data;\n\n    console.log(response);\n\n    if (response.data.statusCode && response.data.statusCode === 401) {\n      notify(response.data.message, \"error\");\n      return;\n    }\n\n    setToken(token);\n    setRoles([...roles]);\n    setLoanToken(token);\n    setLoanRoles([...loanRoles]);\n    setBranchId(branch);\n    setAdminEmail(email);\n    setAdminName(adminName);\n\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const resetAdminPassword = async (old_password, new_password) => {\n  try {\n    const response = await apiClient.post(\"/auth/change_admin_password\", {\n      old_password,\n      new_password,\n    });\n    //const token = response.data.token;\n    //setToken(token);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const initiatePasswordRest = async () => {\n  try {\n    const response = await apiClient.post(\n      \"/auth/initiate_admin_password_reset\",\n      {}\n    );\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const generateCustomerToken = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/auth/user_admin_auth\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}