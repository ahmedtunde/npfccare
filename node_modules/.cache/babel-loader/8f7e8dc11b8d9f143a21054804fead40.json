{"ast":null,"code":"import { isValidDate } from \"../components/utilities\";\nimport apiClient from \"../utils/apiClient\";\nexport const getDocTypes = async () => {\n  try {\n    const response = await apiClient.get(`/signup/get_doc_types`);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const getCustomers = async function () {\n  let channel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let reg_complete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n  try {\n    const response = await apiClient.get(`/support/view_customers?channel=${channel}&reg_complete=${reg_complete}`);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const searchCustomers = async searchPhrase => {\n  try {\n    const response = await apiClient.get(`/support/search_customers?searchPhrase=${searchPhrase}`);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const getCustomer = async customer_id => {\n  try {\n    const response = await apiClient.get(`/support/view_customer?customer_id=${customer_id}`);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const getCustomerBankAcc = async customer_id => {\n  try {\n    const response = await apiClient.get(`/support/view_customer_bank_accounts?customer_id=${customer_id}`);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const getCustomerLogs = async (page, limit) => {\n  try {\n    const response = await apiClient.get(`/support/view_customer_logs?page=${page}&limit=${limit}`);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const getLoanLogs = async (page, limit) => {\n  try {\n    const response = await apiClient.get(`/support/view_loan_logs?page=${page}&limit=${limit}`);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const confirmCustomerLiveliness = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/support/liveliness_check\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const rejectCustomerLiveliness = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/support/liveliness_uncheck\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const confirmCustomerDocuments = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/support/documents_check\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const rejectCustomerDocuments = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/support/documents_uncheck\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const confirmCustomerSignature = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/support/signature_check\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const rejectCustomerSignature = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/support/signature_uncheck\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const confirmCustomerPhoto = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/support/photo_check\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const rejectCustomerPhoto = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/support/photo_uncheck\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const enableCustomer = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/support/enable_customer\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const disableCustomer = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/support/disable_customer\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const enforcePND = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/support/enforce_pnd\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const removePND = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/support/remove_pnd\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const resetCustomerPassword = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/support/reset_password\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const unlockCustomerAccount = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/support/unlock_account\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const unlinkCustomerDevice = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/support/reset_device\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const resetCustomerTxnPIN = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/support/reset_pin\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const syncCustomerInfo = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/support/update_customer_info\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const uploadCustomerSignature = async formData => {\n  try {\n    const response = await apiClient.post(\"/support/create_signature\", formData);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const uploadCustomerPhoto = async formData => {\n  try {\n    const response = await apiClient.post(\"/support/create_photo\", formData);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n/**\n *\n * @param {FormData} formData\n */\n\nexport const uploadCustomerIdDocument = async formData => {\n  try {\n    const response = await apiClient.post(\"/support/create_document\", formData);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const uploadCustomerLivelinessVideo = async formData => {\n  try {\n    const response = await apiClient.post(\"/support/create_video\", formData);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const completeCustomerSignup = async customer_id => {\n  try {\n    const response = await apiClient.post(\"/support/complete_user_signup\", {\n      customer_id\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n/**\n * Export Customers Data\n *\n * @param {Object} exportParams\n * @param {number[]} [exportParams.customer_ids=[]] - array of customers id eg: [1,2]\n * @param {Date} [exportParams.start_date=\"\"] - start date for filter eg: 2021-03-04\n * @param {Date} [exportParams.end_date=\"\"] - end date for filter eg: 2021-03-05\n * @returns {Promise<File>} file of customers data\n */\n\nexport const getExportCustomersData = async _ref => {\n  let {\n    customer_ids = [],\n    start_date = \"\",\n    end_date = \"\"\n  } = _ref;\n\n  //   let headers = {\n  //     \"Accept\": \"application/json, text/plain, */*\",\n  //     \"Content-Type\": \"application/json\",\n  //     \"Authorization\": `Bearer ${getAccessToken()}`,\n  // };\n  // try {\n  //     const response = await fetch('http://20.42.119.47:8282/api/v1/analytics/export_customers', {\n  //         method: \"POST\",\n  //         body: JSON.stringify(customer_ids),\n  //         headers\n  //     });\n  //     if (response.status === 401) {\n  //         return response;\n  //     }\n  //     else {\n  //         return response.blob();\n  //     }\n  // } catch (error) {\n  //     return Promise.reject(error);\n  // }\n  try {\n    start_date = isValidDate(start_date) ? start_date.toISOString() : start_date;\n    end_date = isValidDate(end_date) ? end_date.toISOString() : end_date;\n    customer_ids = `${customer_ids}`;\n    const response = await apiClient.get(`/analytics/export_customers?${customer_ids ? `customer_ids=${customer_ids}&` : \"\"}${start_date ? `start_date=${start_date}&` : \"\"}${end_date ? `end_date=${end_date}` : \"\"}`, {\n      responseType: \"blob\"\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const getExportTransactionData = async _ref2 => {\n  let {\n    customer_ids = [],\n    start_date = \"\",\n    end_date = \"\"\n  } = _ref2;\n\n  try {\n    start_date = isValidDate(start_date) ? start_date.toISOString() : start_date;\n    end_date = isValidDate(end_date) ? end_date.toISOString() : end_date;\n    customer_ids = `${customer_ids}`;\n    const response = await apiClient.get(`/analytics/export_transactions?${customer_ids ? `customer_ids=${customer_ids}&` : \"\"}${start_date ? `start_date=${start_date}&` : \"\"}${end_date ? `end_date=${end_date}` : \"\"}`, {\n      responseType: \"blob\"\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const getCustomerBillings = async customer_id => {\n  try {\n    const response = await apiClient.get(`/biller_support/bill_payments?customer_id=${customer_id}`);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const getBillingStatus = async rrr => {\n  try {\n    const response = await apiClient.get(`/biller_support/transaction_status?rrr=${rrr}`);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const getFailedBillings = async () => {\n  try {\n    const response = await apiClient.get(`/biller_support/failed_transactions`);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const getAllBillings = async () => {\n  try {\n    const response = await apiClient.get(`/biller_support/all_transactions`);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\nexport const editTransferLimitValue = async (customer_id, transfer_limit) => {\n  try {\n    const response = await apiClient.post(\"/support/transfer_limit\", {\n      customer_id,\n      transfer_limit\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};","map":{"version":3,"sources":["/Users/xerde2/Downloads/npf-admin-web/src/services/customerService.js"],"names":["isValidDate","apiClient","getDocTypes","response","get","data","error","Promise","reject","getCustomers","channel","reg_complete","searchCustomers","searchPhrase","getCustomer","customer_id","getCustomerBankAcc","getCustomerLogs","page","limit","getLoanLogs","confirmCustomerLiveliness","post","rejectCustomerLiveliness","confirmCustomerDocuments","rejectCustomerDocuments","confirmCustomerSignature","rejectCustomerSignature","confirmCustomerPhoto","rejectCustomerPhoto","enableCustomer","disableCustomer","enforcePND","removePND","resetCustomerPassword","unlockCustomerAccount","unlinkCustomerDevice","resetCustomerTxnPIN","syncCustomerInfo","uploadCustomerSignature","formData","uploadCustomerPhoto","uploadCustomerIdDocument","uploadCustomerLivelinessVideo","completeCustomerSignup","getExportCustomersData","customer_ids","start_date","end_date","toISOString","responseType","getExportTransactionData","getCustomerBillings","getBillingStatus","rrr","getFailedBillings","getAllBillings","editTransferLimitValue","transfer_limit"],"mappings":"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","sourcesContent":["import { isValidDate } from \"../components/utilities\";\nimport apiClient from \"../utils/apiClient\";\n\nexport const getDocTypes = async () => {\n  try {\n    const response = await apiClient.get(`/signup/get_doc_types`);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const getCustomers = async (channel = \"\", reg_complete = \"\") => {\n  try {\n    const response = await apiClient.get(\n      `/support/view_customers?channel=${channel}&reg_complete=${reg_complete}`\n    );\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const searchCustomers = async (searchPhrase) => {\n  try {\n    const response = await apiClient.get(\n      `/support/search_customers?searchPhrase=${searchPhrase}`\n    );\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const getCustomer = async (customer_id) => {\n  try {\n    const response = await apiClient.get(\n      `/support/view_customer?customer_id=${customer_id}`\n    );\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const getCustomerBankAcc = async (customer_id) => {\n  try {\n    const response = await apiClient.get(\n      `/support/view_customer_bank_accounts?customer_id=${customer_id}`\n    );\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const getCustomerLogs = async (page, limit) => {\n  try {\n    const response = await apiClient.get(\n      `/support/view_customer_logs?page=${page}&limit=${limit}`\n    );\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const getLoanLogs = async (page, limit) => {\n  try {\n    const response = await apiClient.get(\n      `/support/view_loan_logs?page=${page}&limit=${limit}`\n    );\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const confirmCustomerLiveliness = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/support/liveliness_check\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const rejectCustomerLiveliness = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/support/liveliness_uncheck\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const confirmCustomerDocuments = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/support/documents_check\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const rejectCustomerDocuments = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/support/documents_uncheck\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const confirmCustomerSignature = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/support/signature_check\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const rejectCustomerSignature = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/support/signature_uncheck\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const confirmCustomerPhoto = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/support/photo_check\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const rejectCustomerPhoto = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/support/photo_uncheck\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const enableCustomer = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/support/enable_customer\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const disableCustomer = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/support/disable_customer\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const enforcePND = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/support/enforce_pnd\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const removePND = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/support/remove_pnd\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const resetCustomerPassword = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/support/reset_password\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const unlockCustomerAccount = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/support/unlock_account\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const unlinkCustomerDevice = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/support/reset_device\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const resetCustomerTxnPIN = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/support/reset_pin\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const syncCustomerInfo = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/support/update_customer_info\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const uploadCustomerSignature = async (formData) => {\n  try {\n    const response = await apiClient.post(\n      \"/support/create_signature\",\n      formData\n    );\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const uploadCustomerPhoto = async (formData) => {\n  try {\n    const response = await apiClient.post(\"/support/create_photo\", formData);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\n/**\n *\n * @param {FormData} formData\n */\nexport const uploadCustomerIdDocument = async (formData) => {\n  try {\n    const response = await apiClient.post(\"/support/create_document\", formData);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const uploadCustomerLivelinessVideo = async (formData) => {\n  try {\n    const response = await apiClient.post(\"/support/create_video\", formData);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const completeCustomerSignup = async (customer_id) => {\n  try {\n    const response = await apiClient.post(\"/support/complete_user_signup\", {\n      customer_id,\n    });\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\n/**\n * Export Customers Data\n *\n * @param {Object} exportParams\n * @param {number[]} [exportParams.customer_ids=[]] - array of customers id eg: [1,2]\n * @param {Date} [exportParams.start_date=\"\"] - start date for filter eg: 2021-03-04\n * @param {Date} [exportParams.end_date=\"\"] - end date for filter eg: 2021-03-05\n * @returns {Promise<File>} file of customers data\n */\n\nexport const getExportCustomersData = async ({\n  customer_ids = [],\n  start_date = \"\",\n  end_date = \"\",\n}) => {\n  //   let headers = {\n  //     \"Accept\": \"application/json, text/plain, */*\",\n  //     \"Content-Type\": \"application/json\",\n  //     \"Authorization\": `Bearer ${getAccessToken()}`,\n  // };\n\n  // try {\n  //     const response = await fetch('http://20.42.119.47:8282/api/v1/analytics/export_customers', {\n  //         method: \"POST\",\n  //         body: JSON.stringify(customer_ids),\n  //         headers\n  //     });\n  //     if (response.status === 401) {\n  //         return response;\n  //     }\n  //     else {\n  //         return response.blob();\n  //     }\n  // } catch (error) {\n  //     return Promise.reject(error);\n  // }\n  try {\n    start_date = isValidDate(start_date)\n      ? start_date.toISOString()\n      : start_date;\n    end_date = isValidDate(end_date) ? end_date.toISOString() : end_date;\n    customer_ids = `${customer_ids}`;\n\n    const response = await apiClient.get(\n      `/analytics/export_customers?${\n        customer_ids ? `customer_ids=${customer_ids}&` : \"\"\n      }${start_date ? `start_date=${start_date}&` : \"\"}${\n        end_date ? `end_date=${end_date}` : \"\"\n      }`,\n      {\n        responseType: \"blob\",\n      }\n    );\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const getExportTransactionData = async ({\n  customer_ids = [],\n  start_date = \"\",\n  end_date = \"\",\n}) => {\n  try {\n    start_date = isValidDate(start_date)\n      ? start_date.toISOString()\n      : start_date;\n    end_date = isValidDate(end_date) ? end_date.toISOString() : end_date;\n    customer_ids = `${customer_ids}`;\n\n    const response = await apiClient.get(\n      `/analytics/export_transactions?${\n        customer_ids ? `customer_ids=${customer_ids}&` : \"\"\n      }${start_date ? `start_date=${start_date}&` : \"\"}${\n        end_date ? `end_date=${end_date}` : \"\"\n      }`,\n      {\n        responseType: \"blob\",\n      }\n    );\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const getCustomerBillings = async (customer_id) => {\n  try {\n    const response = await apiClient.get(\n      `/biller_support/bill_payments?customer_id=${customer_id}`\n    );\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const getBillingStatus = async (rrr) => {\n  try {\n    const response = await apiClient.get(\n      `/biller_support/transaction_status?rrr=${rrr}`\n    );\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const getFailedBillings = async () => {\n  try {\n    const response = await apiClient.get(`/biller_support/failed_transactions`);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const getAllBillings = async () => {\n  try {\n    const response = await apiClient.get(`/biller_support/all_transactions`);\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const editTransferLimitValue = async (customer_id, transfer_limit) => {\n  try {\n    const response = await apiClient.post(\"/support/transfer_limit\", {\n      customer_id,\n      transfer_limit,\n    });\n\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}